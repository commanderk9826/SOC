
SOC_SSA250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce0  08004ce0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000020  08004d04  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08004d04  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e516  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dae  00000000  00000000  0002e562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00030310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212c1  00000000  00000000  00031d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e32a  00000000  00000000  00052ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf5cf  00000000  00000000  00061323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001308f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  00130944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004cb0 	.word	0x08004cb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08004cb0 	.word	0x08004cb0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	CAN_Filter_Config();
 8000d5e:	f000 fd93 	bl	8001888 <CAN_Filter_Config>
	CAN_TX_Config();
 8000d62:	f000 fd7b 	bl	800185c <CAN_TX_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d66:	f000 ff75 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f9fd 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f000 fb8b 	bl	8001488 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d72:	f000 fa63 	bl	800123c <MX_CAN1_Init>
  MX_TIM6_Init();
 8000d76:	f000 fb1d 	bl	80013b4 <MX_TIM6_Init>
  MX_SPI2_Init();
 8000d7a:	f000 fa95 	bl	80012a8 <MX_SPI2_Init>
  MX_TIM7_Init();
 8000d7e:	f000 fb4d 	bl	800141c <MX_TIM7_Init>
  MX_TIM3_Init();
 8000d82:	f000 fac9 	bl	8001318 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //---CAN setting---//
  HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter);
 8000d86:	4960      	ldr	r1, [pc, #384]	; (8000f08 <main+0x1b0>)
 8000d88:	4860      	ldr	r0, [pc, #384]	; (8000f0c <main+0x1b4>)
 8000d8a:	f001 f8f5 	bl	8001f78 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //CAN Rx interrupt activation
 8000d8e:	2102      	movs	r1, #2
 8000d90:	485e      	ldr	r0, [pc, #376]	; (8000f0c <main+0x1b4>)
 8000d92:	f001 fc43 	bl	800261c <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan1);
 8000d96:	485d      	ldr	r0, [pc, #372]	; (8000f0c <main+0x1b4>)
 8000d98:	f001 f9da 	bl	8002150 <HAL_CAN_Start>

  //---DMA mode ADC---//
  HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f000 ffcb 	bl	8001d38 <HAL_Delay>
  E_ADC_SET();
 8000da2:	f000 fcef 	bl	8001784 <E_ADC_SET>
  HAL_Delay(10);
 8000da6:	200a      	movs	r0, #10
 8000da8:	f000 ffc6 	bl	8001d38 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim6); //Current
 8000dac:	4858      	ldr	r0, [pc, #352]	; (8000f10 <main+0x1b8>)
 8000dae:	f003 fadb 	bl	8004368 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); //Colomb count
 8000db2:	4858      	ldr	r0, [pc, #352]	; (8000f14 <main+0x1bc>)
 8000db4:	f003 fad8 	bl	8004368 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //CAN
 8000db8:	4857      	ldr	r0, [pc, #348]	; (8000f18 <main+0x1c0>)
 8000dba:	f003 fad5 	bl	8004368 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8000dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc2:	f000 ffb9 	bl	8001d38 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(flag)
 8000dc6:	4b55      	ldr	r3, [pc, #340]	; (8000f1c <main+0x1c4>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d16e      	bne.n	8000eac <main+0x154>
	  {
	  case 1:
		  HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000dce:	2014      	movs	r0, #20
 8000dd0:	f001 ffa3 	bl	8002d1a <HAL_NVIC_DisableIRQ>
		  HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000dd4:	201d      	movs	r0, #29
 8000dd6:	f001 ffa0 	bl	8002d1a <HAL_NVIC_DisableIRQ>

		  E_ADC_CNV(delayCount);
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <main+0x1c8>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fce6 	bl	80017b0 <E_ADC_CNV>
		  sample_data = Moving_avg(sample, &Sum, i, len, ADC18_Data);
 8000de4:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <main+0x1cc>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <main+0x1d0>)
 8000dea:	7819      	ldrb	r1, [r3, #0]
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <main+0x1d4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	460b      	mov	r3, r1
 8000df4:	494e      	ldr	r1, [pc, #312]	; (8000f30 <main+0x1d8>)
 8000df6:	484f      	ldr	r0, [pc, #316]	; (8000f34 <main+0x1dc>)
 8000df8:	f000 fc34 	bl	8001664 <Moving_avg>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <main+0x1e0>)
 8000e00:	6013      	str	r3, [r2, #0]
		  Current = Round_dw(((double)sample_data - 41735) / 845.8 + 0.01) - 0.03;
 8000e02:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <main+0x1e0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fb48 	bl	800049c <__aeabi_ui2d>
 8000e0c:	a336      	add	r3, pc, #216	; (adr r3, 8000ee8 <main+0x190>)
 8000e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e12:	f7ff fa05 	bl	8000220 <__aeabi_dsub>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	a334      	add	r3, pc, #208	; (adr r3, 8000ef0 <main+0x198>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fcde 	bl	80007e4 <__aeabi_ddiv>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	a331      	add	r3, pc, #196	; (adr r3, 8000ef8 <main+0x1a0>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff f9f5 	bl	8000224 <__adddf3>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	ec43 2b17 	vmov	d7, r2, r3
 8000e42:	eeb0 0a47 	vmov.f32	s0, s14
 8000e46:	eef0 0a67 	vmov.f32	s1, s15
 8000e4a:	f000 fc67 	bl	800171c <Round_dw>
 8000e4e:	ec51 0b10 	vmov	r0, r1, d0
 8000e52:	a32b      	add	r3, pc, #172	; (adr r3, 8000f00 <main+0x1a8>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff f9e2 	bl	8000220 <__aeabi_dsub>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4936      	ldr	r1, [pc, #216]	; (8000f3c <main+0x1e4>)
 8000e62:	e9c1 2300 	strd	r2, r3, [r1]
		  i++; //i : 0 ~ len-1 -> (odd - even)
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <main+0x1cc>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <main+0x1cc>)
 8000e70:	701a      	strb	r2, [r3, #0]
		  if(i >= len) i = 0;
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <main+0x1cc>)
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <main+0x1d0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d302      	bcc.n	8000e84 <main+0x12c>
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <main+0x1cc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]

		  if(Peak_Current < Current_CAN.integer) Peak_Current = Current_CAN.integer;
 8000e84:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <main+0x1e8>)
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <main+0x1ec>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d903      	bls.n	8000e98 <main+0x140>
 8000e90:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <main+0x1e8>)
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <main+0x1ec>)
 8000e96:	701a      	strb	r2, [r3, #0]
		  //if((signed int)round(Current) >= Peak_Current) Peak_Current = (signed int)round(Current);

		  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f001 ff30 	bl	8002cfe <HAL_NVIC_EnableIRQ>
		  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e9e:	201d      	movs	r0, #29
 8000ea0:	f001 ff2d 	bl	8002cfe <HAL_NVIC_EnableIRQ>
		  flag = 0;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <main+0x1c4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
		  break;
 8000eaa:	bf00      	nop
	  }

	  //---Colomb_counting : ADC1(Timer3)---//
	  switch(RxData[0])
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <main+0x1f0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	f040 80da 	bne.w	800106a <main+0x312>
	  {
	  case 6:
		  if(flag_cal == 1)
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <main+0x1f4>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	f040 80d4 	bne.w	8001068 <main+0x310>
		  {
			  if(count % 2 == 0) val[0] = Current, time[0] = HAL_GetTick();
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <main+0x1f8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d146      	bne.n	8000f5c <main+0x204>
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <main+0x1e4>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	491f      	ldr	r1, [pc, #124]	; (8000f54 <main+0x1fc>)
 8000ed6:	e9c1 2300 	strd	r2, r3, [r1]
 8000eda:	f000 ff21 	bl	8001d20 <HAL_GetTick>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <main+0x200>)
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e045      	b.n	8000f72 <main+0x21a>
 8000ee6:	bf00      	nop
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	40e460e0 	.word	0x40e460e0
 8000ef0:	66666666 	.word	0x66666666
 8000ef4:	408a6e66 	.word	0x408a6e66
 8000ef8:	47ae147b 	.word	0x47ae147b
 8000efc:	3f847ae1 	.word	0x3f847ae1
 8000f00:	eb851eb8 	.word	0xeb851eb8
 8000f04:	3f9eb851 	.word	0x3f9eb851
 8000f08:	20000084 	.word	0x20000084
 8000f0c:	200000ac 	.word	0x200000ac
 8000f10:	20000174 	.word	0x20000174
 8000f14:	200001bc 	.word	0x200001bc
 8000f18:	2000012c 	.word	0x2000012c
 8000f1c:	20000204 	.word	0x20000204
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000209 	.word	0x20000209
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000218 	.word	0x20000218
 8000f30:	2000021c 	.word	0x2000021c
 8000f34:	20000220 	.word	0x20000220
 8000f38:	20000608 	.word	0x20000608
 8000f3c:	20000610 	.word	0x20000610
 8000f40:	2000063c 	.word	0x2000063c
 8000f44:	2000060c 	.word	0x2000060c
 8000f48:	2000007c 	.word	0x2000007c
 8000f4c:	20000206 	.word	0x20000206
 8000f50:	20000207 	.word	0x20000207
 8000f54:	20000620 	.word	0x20000620
 8000f58:	20000210 	.word	0x20000210
			  else val[1] = Current, time[1] = HAL_GetTick();
 8000f5c:	4b6e      	ldr	r3, [pc, #440]	; (8001118 <main+0x3c0>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	496e      	ldr	r1, [pc, #440]	; (800111c <main+0x3c4>)
 8000f64:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000f68:	f000 feda 	bl	8001d20 <HAL_GetTick>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a6c      	ldr	r2, [pc, #432]	; (8001120 <main+0x3c8>)
 8000f70:	6053      	str	r3, [r2, #4]
			  dt = Cal_dt(time[0], time[1]);
 8000f72:	4b6b      	ldr	r3, [pc, #428]	; (8001120 <main+0x3c8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6a      	ldr	r2, [pc, #424]	; (8001120 <main+0x3c8>)
 8000f78:	6852      	ldr	r2, [r2, #4]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fb27 	bl	80015d0 <Cal_dt>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b67      	ldr	r3, [pc, #412]	; (8001124 <main+0x3cc>)
 8000f88:	701a      	strb	r2, [r3, #0]

			  integral_val = ((val[0] + val[1]) * dt) / 7200; //(mAh)
 8000f8a:	4b64      	ldr	r3, [pc, #400]	; (800111c <main+0x3c4>)
 8000f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f90:	4b62      	ldr	r3, [pc, #392]	; (800111c <main+0x3c4>)
 8000f92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f96:	f7ff f945 	bl	8000224 <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4614      	mov	r4, r2
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	4b60      	ldr	r3, [pc, #384]	; (8001124 <main+0x3cc>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa88 	bl	80004bc <__aeabi_i2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	f7ff faec 	bl	8000590 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	a353      	add	r3, pc, #332	; (adr r3, 8001110 <main+0x3b8>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff fc0d 	bl	80007e4 <__aeabi_ddiv>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4956      	ldr	r1, [pc, #344]	; (8001128 <main+0x3d0>)
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]
			  Colomb_count += integral_val;
 8000fd4:	4b55      	ldr	r3, [pc, #340]	; (800112c <main+0x3d4>)
 8000fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <main+0x3d0>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff f920 	bl	8000224 <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4950      	ldr	r1, [pc, #320]	; (800112c <main+0x3d4>)
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
			  SOC = (Rated_cap - Colomb_count) / Rated_cap * 100; //State of charge - SOC(%)
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <main+0x3d8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fa74 	bl	80004e0 <__aeabi_f2d>
 8000ff8:	4b4c      	ldr	r3, [pc, #304]	; (800112c <main+0x3d4>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff f90f 	bl	8000220 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4614      	mov	r4, r2
 8001008:	461d      	mov	r5, r3
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <main+0x3d8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa66 	bl	80004e0 <__aeabi_f2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4620      	mov	r0, r4
 800101a:	4629      	mov	r1, r5
 800101c:	f7ff fbe2 	bl	80007e4 <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b41      	ldr	r3, [pc, #260]	; (8001134 <main+0x3dc>)
 800102e:	f7ff faaf 	bl	8000590 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fcbb 	bl	80009b4 <__aeabi_d2f>
 800103e:	4603      	mov	r3, r0
 8001040:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <main+0x3e0>)
 8001042:	6013      	str	r3, [r2, #0]

			  count++;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <main+0x3e4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b3b      	ldr	r3, [pc, #236]	; (800113c <main+0x3e4>)
 800104e:	701a      	strb	r2, [r3, #0]
			  if(count >= len) count = 0;
 8001050:	4b3a      	ldr	r3, [pc, #232]	; (800113c <main+0x3e4>)
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <main+0x3e8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d302      	bcc.n	8001062 <main+0x30a>
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <main+0x3e4>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]

			  flag_cal = 0;
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <main+0x3ec>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8001068:	bf00      	nop
	  }

	  //---CAN---//
	  switch(flag_CAN)
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <main+0x3f0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	f47f aea9 	bne.w	8000dc6 <main+0x6e>
	  {
	  case 1:
		  Seperation_int_and_dec(SOC, &SOC_CAN);
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <main+0x3e0>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	4834      	ldr	r0, [pc, #208]	; (800114c <main+0x3f4>)
 800107c:	eeb0 0a67 	vmov.f32	s0, s15
 8001080:	f000 fb18 	bl	80016b4 <Seperation_int_and_dec>
		  Seperation_int_and_dec(Current, &Current_CAN);
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <main+0x3c0>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fc91 	bl	80009b4 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	482e      	ldr	r0, [pc, #184]	; (8001150 <main+0x3f8>)
 8001096:	ee00 3a10 	vmov	s0, r3
 800109a:	f000 fb0b 	bl	80016b4 <Seperation_int_and_dec>

		  TxData[0] = SOC_CAN.integer;
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <main+0x3f4>)
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <main+0x3fc>)
 80010a4:	701a      	strb	r2, [r3, #0]
		  TxData[1] = SOC_CAN.decimal;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <main+0x3f4>)
 80010a8:	785a      	ldrb	r2, [r3, #1]
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <main+0x3fc>)
 80010ac:	705a      	strb	r2, [r3, #1]
		  TxData[2] = Current_CAN.integer;
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <main+0x3f8>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <main+0x3fc>)
 80010b4:	709a      	strb	r2, [r3, #2]
		  TxData[3] = Current_CAN.decimal;
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <main+0x3f8>)
 80010b8:	785a      	ldrb	r2, [r3, #1]
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <main+0x3fc>)
 80010bc:	70da      	strb	r2, [r3, #3]
		  TxData[4] = Peak_Current;
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <main+0x400>)
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <main+0x3fc>)
 80010c4:	711a      	strb	r2, [r3, #4]
		  for(int i = 5; i < 8; i++) TxData[i] = 0;
 80010c6:	2305      	movs	r3, #5
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	e007      	b.n	80010dc <main+0x384>
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <main+0x3fc>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3301      	adds	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b07      	cmp	r3, #7
 80010e0:	ddf4      	ble.n	80010cc <main+0x374>

		  TxHeader.StdId = 0x09; //ID of message
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <main+0x404>)
 80010e4:	2209      	movs	r2, #9
 80010e6:	601a      	str	r2, [r3, #0]
		  TxMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80010e8:	481d      	ldr	r0, [pc, #116]	; (8001160 <main+0x408>)
 80010ea:	f001 f950 	bl	800238e <HAL_CAN_GetTxMailboxesFreeLevel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <main+0x40c>)
 80010f2:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <main+0x40c>)
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <main+0x3fc>)
 80010f8:	4918      	ldr	r1, [pc, #96]	; (800115c <main+0x404>)
 80010fa:	4819      	ldr	r0, [pc, #100]	; (8001160 <main+0x408>)
 80010fc:	f001 f86c 	bl	80021d8 <HAL_CAN_AddTxMessage>

		  flag_CAN = 0;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <main+0x3f0>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		  break;
 8001106:	bf00      	nop
	  switch(flag)
 8001108:	e65d      	b.n	8000dc6 <main+0x6e>
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	00000000 	.word	0x00000000
 8001114:	40bc2000 	.word	0x40bc2000
 8001118:	20000610 	.word	0x20000610
 800111c:	20000620 	.word	0x20000620
 8001120:	20000210 	.word	0x20000210
 8001124:	20000208 	.word	0x20000208
 8001128:	20000630 	.word	0x20000630
 800112c:	20000618 	.word	0x20000618
 8001130:	20000008 	.word	0x20000008
 8001134:	40590000 	.word	0x40590000
 8001138:	20000004 	.word	0x20000004
 800113c:	20000207 	.word	0x20000207
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000206 	.word	0x20000206
 8001148:	20000205 	.word	0x20000205
 800114c:	20000638 	.word	0x20000638
 8001150:	2000063c 	.word	0x2000063c
 8001154:	20000054 	.word	0x20000054
 8001158:	2000060c 	.word	0x2000060c
 800115c:	2000003c 	.word	0x2000003c
 8001160:	200000ac 	.word	0x200000ac
 8001164:	2000005c 	.word	0x2000005c

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2234      	movs	r2, #52	; 0x34
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fd4c 	bl	8004c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <SystemClock_Config+0xcc>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <SystemClock_Config+0xd0>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 f979 	bl	80034e8 <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011fc:	f000 fb6a 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2302      	movs	r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2103      	movs	r1, #3
 800121c:	4618      	mov	r0, r3
 800121e:	f001 ff77 	bl	8003110 <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001228:	f000 fb54 	bl	80018d4 <Error_Handler>
  }
}
 800122c:	bf00      	nop
 800122e:	3750      	adds	r7, #80	; 0x50
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <MX_CAN1_Init+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001248:	2205      	movs	r2, #5
 800124a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_CAN1_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_CAN1_Init+0x64>)
 800125a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800125e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001262:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001266:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_CAN1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001270:	2201      	movs	r2, #1
 8001272:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_CAN1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_CAN1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_CAN1_Init+0x64>)
 800128e:	f000 fd77 	bl	8001d80 <HAL_CAN_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001298:	f000 fb1c 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200000ac 	.word	0x200000ac
 80012a4:	40006400 	.word	0x40006400

080012a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_SPI2_Init+0x68>)
 80012ae:	4a19      	ldr	r2, [pc, #100]	; (8001314 <MX_SPI2_Init+0x6c>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_SPI2_Init+0x68>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_SPI2_Init+0x68>)
 80012bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_SPI2_Init+0x68>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_SPI2_Init+0x68>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_SPI2_Init+0x68>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_SPI2_Init+0x68>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_SPI2_Init+0x68>)
 80012de:	2238      	movs	r2, #56	; 0x38
 80012e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_SPI2_Init+0x68>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_SPI2_Init+0x68>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_SPI2_Init+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_SPI2_Init+0x68>)
 80012f6:	220a      	movs	r2, #10
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_SPI2_Init+0x68>)
 80012fc:	f002 fb78 	bl	80039f0 <HAL_SPI_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001306:	f000 fae5 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000d4 	.word	0x200000d4
 8001314:	40003800 	.word	0x40003800

08001318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_TIM3_Init+0x94>)
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <MX_TIM3_Init+0x98>)
 8001338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_TIM3_Init+0x94>)
 800133c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_TIM3_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_TIM3_Init+0x94>)
 800134a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800134e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_TIM3_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_TIM3_Init+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_TIM3_Init+0x94>)
 800135e:	f002 ffb3 	bl	80042c8 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001368:	f000 fab4 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <MX_TIM3_Init+0x94>)
 800137a:	f003 f96d 	bl	8004658 <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001384:	f000 faa6 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_TIM3_Init+0x94>)
 8001396:	f003 fb89 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013a0:	f000 fa98 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000012c 	.word	0x2000012c
 80013b0:	40000400 	.word	0x40000400

080013b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_TIM6_Init+0x60>)
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <MX_TIM6_Init+0x64>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_TIM6_Init+0x60>)
 80013ca:	2263      	movs	r2, #99	; 0x63
 80013cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_TIM6_Init+0x60>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 180-1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_TIM6_Init+0x60>)
 80013d6:	22b3      	movs	r2, #179	; 0xb3
 80013d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_TIM6_Init+0x60>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_TIM6_Init+0x60>)
 80013e2:	f002 ff71 	bl	80042c8 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80013ec:	f000 fa72 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_TIM6_Init+0x60>)
 80013fe:	f003 fb55 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fa64 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000174 	.word	0x20000174
 8001418:	40001000 	.word	0x40001000

0800141c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_TIM7_Init+0x64>)
 800142c:	4a15      	ldr	r2, [pc, #84]	; (8001484 <MX_TIM7_Init+0x68>)
 800142e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_TIM7_Init+0x64>)
 8001432:	f242 720f 	movw	r2, #9999	; 0x270f
 8001436:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_TIM7_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_TIM7_Init+0x64>)
 8001440:	2263      	movs	r2, #99	; 0x63
 8001442:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_TIM7_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_TIM7_Init+0x64>)
 800144c:	f002 ff3c 	bl	80042c8 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001456:	f000 fa3d 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001462:	463b      	mov	r3, r7
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_TIM7_Init+0x64>)
 8001468:	f003 fb20 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001472:	f000 fa2f 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001bc 	.word	0x200001bc
 8001484:	40001400 	.word	0x40001400

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <MX_GPIO_Init+0xe4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a31      	ldr	r2, [pc, #196]	; (800156c <MX_GPIO_Init+0xe4>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <MX_GPIO_Init+0xe4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <MX_GPIO_Init+0xe4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a2a      	ldr	r2, [pc, #168]	; (800156c <MX_GPIO_Init+0xe4>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <MX_GPIO_Init+0xe4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <MX_GPIO_Init+0xe4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <MX_GPIO_Init+0xe4>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_GPIO_Init+0xe4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_GPIO_Init+0xe4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_GPIO_Init+0xe4>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_GPIO_Init+0xe4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001514:	4816      	ldr	r0, [pc, #88]	; (8001570 <MX_GPIO_Init+0xe8>)
 8001516:	f001 fdaf 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001520:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4810      	ldr	r0, [pc, #64]	; (8001574 <MX_GPIO_Init+0xec>)
 8001532:	f001 fc0d 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001536:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <MX_GPIO_Init+0xe8>)
 8001550:	f001 fbfe 	bl	8002d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2105      	movs	r1, #5
 8001558:	2028      	movs	r0, #40	; 0x28
 800155a:	f001 fbb4 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800155e:	2028      	movs	r0, #40	; 0x28
 8001560:	f001 fbcd 	bl	8002cfe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020400 	.word	0x40020400
 8001574:	40020800 	.word	0x40020800

08001578 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //External interrupt
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
	flag_cal++;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x28>)
 800158c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800158e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001594:	f001 fd89 	bl	80030aa <HAL_GPIO_TogglePin>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000206 	.word	0x20000206
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80015b8:	f000 ff1e 	bl	80023f8 <HAL_CAN_GetRxMessage>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000007c 	.word	0x2000007c
 80015c8:	20000060 	.word	0x20000060
 80015cc:	200000ac 	.word	0x200000ac

080015d0 <Cal_dt>:

uint16_t Cal_dt(uint32_t t1, uint32_t t2) //Time interval calculation
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	uint16_t dt = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	81fb      	strh	r3, [r7, #14]
	dt = abs(t2 - t1);
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bfb8      	it	lt
 80015e8:	425b      	neglt	r3, r3
 80015ea:	81fb      	strh	r3, [r7, #14]
	if(dt > 100) dt = 0; //Initial value clearing(Initial condition setting & Overflow processing)
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <Cal_dt+0x26>
 80015f2:	2300      	movs	r3, #0
 80015f4:	81fb      	strh	r3, [r7, #14]
	return dt;
 80015f6:	89fb      	ldrh	r3, [r7, #14]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //ADC1 - timer3(1ms) & timer4(10ms) - Moving average filter
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) flag = 1;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d103      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0x1a>
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
	else if(htim->Instance == TIM7) flag_CAN = 1;
	else if(htim->Instance == TIM3) flag_cal = 1;
}
 800161c:	e010      	b.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if(htim->Instance == TIM7) flag_CAN = 1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d103      	bne.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
}
 800162e:	e007      	b.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if(htim->Instance == TIM3) flag_cal = 1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d102      	bne.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x3c>
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40001000 	.word	0x40001000
 8001650:	20000204 	.word	0x20000204
 8001654:	40001400 	.word	0x40001400
 8001658:	20000205 	.word	0x20000205
 800165c:	40000400 	.word	0x40000400
 8001660:	20000206 	.word	0x20000206

08001664 <Moving_avg>:

uint32_t Moving_avg(uint32_t *ptr_arr_sample, uint32_t *ptr_sum, uint8_t i, uint8_t len, uint32_t n_data) //Moving average filter
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	460b      	mov	r3, r1
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	4613      	mov	r3, r2
 8001678:	71bb      	strb	r3, [r7, #6]
	*ptr_sum = *ptr_sum - ptr_arr_sample[i] + n_data; //sample[i] : old data, n_data : new data
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	68f9      	ldr	r1, [r7, #12]
 8001684:	440b      	add	r3, r1
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1ad2      	subs	r2, r2, r3
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	441a      	add	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	601a      	str	r2, [r3, #0]
	ptr_arr_sample[i] = n_data; //Data freshening
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	601a      	str	r2, [r3, #0]
	return *ptr_sum / len; //##Filtered real-time data##
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <Seperation_int_and_dec>:

void Seperation_int_and_dec(float num, Sep_int_dec *ptr_Data_CAN)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80016be:	60b8      	str	r0, [r7, #8]
	ptr_Data_CAN -> integer = (uint8_t)num;
 80016c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80016cc:	793b      	ldrb	r3, [r7, #4]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	701a      	strb	r2, [r3, #0]
	ptr_Data_CAN -> decimal = (uint8_t)((num - (uint8_t)num) * 100);
 80016d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80016e0:	793b      	ldrb	r3, [r7, #4]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001718 <Seperation_int_and_dec+0x64>
 80016f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001700:	edc7 7a01 	vstr	s15, [r7, #4]
 8001704:	793b      	ldrb	r3, [r7, #4]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	705a      	strb	r2, [r3, #1]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	42c80000 	.word	0x42c80000

0800171c <Round_dw>:

	return Current;
}

double Round_dw(double data)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	ed87 0b00 	vstr	d0, [r7]
	double result = 0;
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return result = round(data * 100) / 100;
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <Round_dw+0x64>)
 8001738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173c:	f7fe ff28 	bl	8000590 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	ec43 2b17 	vmov	d7, r2, r3
 8001748:	eeb0 0a47 	vmov.f32	s0, s14
 800174c:	eef0 0a67 	vmov.f32	s1, s15
 8001750:	f003 fa68 	bl	8004c24 <round>
 8001754:	ec51 0b10 	vmov	r0, r1, d0
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <Round_dw+0x64>)
 800175e:	f7ff f841 	bl	80007e4 <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800176a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800176e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001772:	eeb0 0a47 	vmov.f32	s0, s14
 8001776:	eef0 0a67 	vmov.f32	s1, s15
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40590000 	.word	0x40590000

08001784 <E_ADC_SET>:

void E_ADC_SET(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); //SDI -> pull-up
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178e:	4807      	ldr	r0, [pc, #28]	; (80017ac <E_ADC_SET+0x28>)
 8001790:	f001 fc72 	bl	8003078 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f000 facf 	bl	8001d38 <HAL_Delay>
	NSS_HIGH();
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <E_ADC_SET+0x28>)
 80017a2:	f001 fc69 	bl	8003078 <HAL_GPIO_WritePin>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020400 	.word	0x40020400

080017b0 <E_ADC_CNV>:
void E_ADC_CNV(volatile uint8_t delayCount)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	NSS_LOW();
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c0:	4820      	ldr	r0, [pc, #128]	; (8001844 <E_ADC_CNV+0x94>)
 80017c2:	f001 fc59 	bl	8003078 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)E_ADC_buffer, 1, HAL_MAX_DELAY);
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	2201      	movs	r2, #1
 80017cc:	491e      	ldr	r1, [pc, #120]	; (8001848 <E_ADC_CNV+0x98>)
 80017ce:	481f      	ldr	r0, [pc, #124]	; (800184c <E_ADC_CNV+0x9c>)
 80017d0:	f002 f997 	bl	8003b02 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&E_ADC_buffer[1], 1, HAL_MAX_DELAY);
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	2201      	movs	r2, #1
 80017da:	491d      	ldr	r1, [pc, #116]	; (8001850 <E_ADC_CNV+0xa0>)
 80017dc:	481b      	ldr	r0, [pc, #108]	; (800184c <E_ADC_CNV+0x9c>)
 80017de:	f002 f990 	bl	8003b02 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&E_ADC_buffer[2], 1, HAL_MAX_DELAY);
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	2201      	movs	r2, #1
 80017e8:	491a      	ldr	r1, [pc, #104]	; (8001854 <E_ADC_CNV+0xa4>)
 80017ea:	4818      	ldr	r0, [pc, #96]	; (800184c <E_ADC_CNV+0x9c>)
 80017ec:	f002 f989 	bl	8003b02 <HAL_SPI_Receive>
	NSS_HIGH();
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f6:	4813      	ldr	r0, [pc, #76]	; (8001844 <E_ADC_CNV+0x94>)
 80017f8:	f001 fc3e 	bl	8003078 <HAL_GPIO_WritePin>
	for(uint32_t i = 0; i < delayCount; i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e002      	b.n	8001808 <E_ADC_CNV+0x58>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4293      	cmp	r3, r2
 8001812:	d3f6      	bcc.n	8001802 <E_ADC_CNV+0x52>
	{
			 //tconv delay
	}

	E_ADC_buffer[2] = E_ADC_buffer[2] >> 6;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <E_ADC_CNV+0x98>)
 8001816:	789b      	ldrb	r3, [r3, #2]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <E_ADC_CNV+0x98>)
 800181e:	709a      	strb	r2, [r3, #2]
	ADC18_Data = E_ADC_buffer[0] << 10 | E_ADC_buffer[1] << 2 | E_ADC_buffer[2];
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <E_ADC_CNV+0x98>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	029a      	lsls	r2, r3, #10
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <E_ADC_CNV+0x98>)
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4313      	orrs	r3, r2
 800182e:	4a06      	ldr	r2, [pc, #24]	; (8001848 <E_ADC_CNV+0x98>)
 8001830:	7892      	ldrb	r2, [r2, #2]
 8001832:	4313      	orrs	r3, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <E_ADC_CNV+0xa8>)
 8001838:	601a      	str	r2, [r3, #0]
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40020400 	.word	0x40020400
 8001848:	2000020c 	.word	0x2000020c
 800184c:	200000d4 	.word	0x200000d4
 8001850:	2000020d 	.word	0x2000020d
 8001854:	2000020e 	.word	0x2000020e
 8001858:	20000218 	.word	0x20000218

0800185c <CAN_TX_Config>:
	NSS_LOW(); //wake-up
	NSS_HIGH();
}

void CAN_TX_Config(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	TxHeader.DLC = 8;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <CAN_TX_Config+0x28>)
 8001862:	2208      	movs	r2, #8
 8001864:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD; //2.0A
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <CAN_TX_Config+0x28>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <CAN_TX_Config+0x28>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <CAN_TX_Config+0x28>)
 8001874:	2200      	movs	r2, #0
 8001876:	751a      	strb	r2, [r3, #20]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000003c 	.word	0x2000003c

08001888 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	CAN_Filter.FilterActivation = ENABLE; //Filter : Enable -> message reception
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <CAN_Filter_Config+0x48>)
 800188e:	2201      	movs	r2, #1
 8001890:	621a      	str	r2, [r3, #32]
	CAN_Filter.FilterIdHigh = 0x0AA << 5;
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <CAN_Filter_Config+0x48>)
 8001894:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
 8001898:	601a      	str	r2, [r3, #0]
	CAN_Filter.FilterIdLow = 0x0AA << 5;
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <CAN_Filter_Config+0x48>)
 800189c:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
 80018a0:	605a      	str	r2, [r3, #4]
	CAN_Filter.FilterMaskIdHigh = 0x00 << 5;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <CAN_Filter_Config+0x48>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
	CAN_Filter.FilterMaskIdLow = 0x00 << 5;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <CAN_Filter_Config+0x48>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
	CAN_Filter.FilterScale = CAN_FILTERSCALE_16BIT; //2.0A -> 16Bit, 2.0B -> 32Bit
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <CAN_Filter_Config+0x48>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	61da      	str	r2, [r3, #28]
	CAN_Filter.FilterBank = 0;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <CAN_Filter_Config+0x48>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
	CAN_Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <CAN_Filter_Config+0x48>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
	CAN_Filter.FilterMode = CAN_FILTERMODE_IDLIST;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <CAN_Filter_Config+0x48>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000084 	.word	0x20000084

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_MspInit+0x4c>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_MspInit+0x4c>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_CAN_MspInit+0x94>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d134      	bne.n	80019bc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_CAN_MspInit+0x98>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_CAN_MspInit+0x98>)
 800195c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_CAN_MspInit+0x98>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_CAN_MspInit+0x98>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <HAL_CAN_MspInit+0x98>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_CAN_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800198a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 800199c:	2308      	movs	r3, #8
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <HAL_CAN_MspInit+0x9c>)
 80019a8:	f001 f9d2 	bl	8002d50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2103      	movs	r1, #3
 80019b0:	2014      	movs	r0, #20
 80019b2:	f001 f988 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019b6:	2014      	movs	r0, #20
 80019b8:	f001 f9a1 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40006400 	.word	0x40006400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020400 	.word	0x40020400

080019d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_SPI_MspInit+0x84>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d12c      	bne.n	8001a4c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_SPI_MspInit+0x88>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_SPI_MspInit+0x88>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_SPI_MspInit+0x88>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_SPI_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_SPI_MspInit+0x88>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_SPI_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001a2a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_SPI_MspInit+0x8c>)
 8001a48:	f001 f982 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a4c:	bf00      	nop
 8001a4e:	3728      	adds	r7, #40	; 0x28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40003800 	.word	0x40003800
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020400 	.word	0x40020400

08001a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <HAL_TIM_Base_MspInit+0xb8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d116      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a28      	ldr	r2, [pc, #160]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	201d      	movs	r0, #29
 8001a94:	f001 f917 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a98:	201d      	movs	r0, #29
 8001a9a:	f001 f930 	bl	8002cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a9e:	e036      	b.n	8001b0e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_TIM_Base_MspInit+0xc0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d116      	bne.n	8001ad8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001ab4:	f043 0310 	orr.w	r3, r3, #16
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2036      	movs	r0, #54	; 0x36
 8001acc:	f001 f8fb 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ad0:	2036      	movs	r0, #54	; 0x36
 8001ad2:	f001 f914 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001ad6:	e01a      	b.n	8001b0e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_TIM_Base_MspInit+0xc4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d115      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001aec:	f043 0320 	orr.w	r3, r3, #32
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_TIM_Base_MspInit+0xbc>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2103      	movs	r1, #3
 8001b02:	2037      	movs	r0, #55	; 0x37
 8001b04:	f001 f8df 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b08:	2037      	movs	r0, #55	; 0x37
 8001b0a:	f001 f8f8 	bl	8002cfe <HAL_NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40001000 	.word	0x40001000
 8001b24:	40001400 	.word	0x40001400

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b74:	f000 f8c0 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <CAN1_RX0_IRQHandler+0x10>)
 8001b82:	f000 fd71 	bl	8002668 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200000ac 	.word	0x200000ac

08001b90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM3_IRQHandler+0x10>)
 8001b96:	f002 fc57 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000012c 	.word	0x2000012c

08001ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ba8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bac:	f001 fa98 	bl	80030e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <TIM6_DAC_IRQHandler+0x10>)
 8001bba:	f002 fc45 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000174 	.word	0x20000174

08001bc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM7_IRQHandler+0x10>)
 8001bce:	f002 fc3b 	bl	8004448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200001bc 	.word	0x200001bc

08001bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c06:	490e      	ldr	r1, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c1c:	4c0b      	ldr	r4, [pc, #44]	; (8001c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff ffd7 	bl	8001bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f002 ffcd 	bl	8004bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff f891 	bl	8000d58 <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001c44:	08004ce8 	.word	0x08004ce8
  ldr r2, =_sbss
 8001c48:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001c4c:	20000644 	.word	0x20000644

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f001 f817 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fe2a 	bl	80018e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 f83d 	bl	8002d36 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f000 fff7 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000010 	.word	0x20000010
 8001cf0:	20000018 	.word	0x20000018
 8001cf4:	20000014 	.word	0x20000014

08001cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x20>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_IncTick+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_IncTick+0x24>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20000018 	.word	0x20000018
 8001d1c:	20000640 	.word	0x20000640

08001d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return uwTick;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_GetTick+0x14>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000640 	.word	0x20000640

08001d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff ffee 	bl	8001d20 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d005      	beq.n	8001d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_Delay+0x44>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5e:	bf00      	nop
 8001d60:	f7ff ffde 	bl	8001d20 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d8f7      	bhi.n	8001d60 <HAL_Delay+0x28>
  {
  }
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000018 	.word	0x20000018

08001d80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0ed      	b.n	8001f6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fdc6 	bl	8001930 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db4:	f7ff ffb4 	bl	8001d20 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dba:	e012      	b.n	8001de2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dbc:	f7ff ffb0 	bl	8001d20 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b0a      	cmp	r3, #10
 8001dc8:	d90b      	bls.n	8001de2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2205      	movs	r2, #5
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0c5      	b.n	8001f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0e5      	beq.n	8001dbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0202 	bic.w	r2, r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e00:	f7ff ff8e 	bl	8001d20 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e06:	e012      	b.n	8001e2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e08:	f7ff ff8a 	bl	8001d20 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b0a      	cmp	r3, #10
 8001e14:	d90b      	bls.n	8001e2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2205      	movs	r2, #5
 8001e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e09f      	b.n	8001f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e5      	bne.n	8001e08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7e1b      	ldrb	r3, [r3, #24]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e007      	b.n	8001e66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7e5b      	ldrb	r3, [r3, #25]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e007      	b.n	8001e90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e9b      	ldrb	r3, [r3, #26]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e007      	b.n	8001eba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0220 	bic.w	r2, r2, #32
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7edb      	ldrb	r3, [r3, #27]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0210 	bic.w	r2, r2, #16
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0210 	orr.w	r2, r2, #16
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7f1b      	ldrb	r3, [r3, #28]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0208 	orr.w	r2, r2, #8
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0208 	bic.w	r2, r2, #8
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7f5b      	ldrb	r3, [r3, #29]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d108      	bne.n	8001f28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0204 	orr.w	r2, r2, #4
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e007      	b.n	8001f38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0204 	bic.w	r2, r2, #4
 8001f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	ea42 0103 	orr.w	r1, r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d003      	beq.n	8001f9e <HAL_CAN_ConfigFilter+0x26>
 8001f96:	7cfb      	ldrb	r3, [r7, #19]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	f040 80c7 	bne.w	800212c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a69      	ldr	r2, [pc, #420]	; (8002148 <HAL_CAN_ConfigFilter+0x1d0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d001      	beq.n	8001fac <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001fa8:	4b68      	ldr	r3, [pc, #416]	; (800214c <HAL_CAN_ConfigFilter+0x1d4>)
 8001faa:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4a63      	ldr	r2, [pc, #396]	; (800214c <HAL_CAN_ConfigFilter+0x1d4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d111      	bne.n	8001fe8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d123      	bne.n	800205a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002034:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3248      	adds	r2, #72	; 0x48
 800203a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800204e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002050:	6979      	ldr	r1, [r7, #20]
 8002052:	3348      	adds	r3, #72	; 0x48
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d122      	bne.n	80020a8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	431a      	orrs	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002082:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3248      	adds	r2, #72	; 0x48
 8002088:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800209c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800209e:	6979      	ldr	r1, [r7, #20]
 80020a0:	3348      	adds	r3, #72	; 0x48
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020c2:	e007      	b.n	80020d4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020ee:	e007      	b.n	8002100 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	431a      	orrs	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800211e:	f023 0201 	bic.w	r2, r3, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e006      	b.n	800213a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
  }
}
 800213a:	4618      	mov	r0, r3
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40006c00 	.word	0x40006c00
 800214c:	40006400 	.word	0x40006400

08002150 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d12e      	bne.n	80021c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800217c:	f7ff fdd0 	bl	8001d20 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002182:	e012      	b.n	80021aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002184:	f7ff fdcc 	bl	8001d20 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b0a      	cmp	r3, #10
 8002190:	d90b      	bls.n	80021aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2205      	movs	r2, #5
 80021a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e012      	b.n	80021d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1e5      	bne.n	8002184 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e006      	b.n	80021d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d003      	beq.n	8002204 <HAL_CAN_AddTxMessage+0x2c>
 80021fc:	7ffb      	ldrb	r3, [r7, #31]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 80b8 	bne.w	8002374 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80a0 	beq.w	8002364 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	0e1b      	lsrs	r3, r3, #24
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d907      	bls.n	8002244 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e09e      	b.n	8002382 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002244:	2201      	movs	r2, #1
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	409a      	lsls	r2, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10d      	bne.n	8002272 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	6809      	ldr	r1, [r1, #0]
 8002264:	431a      	orrs	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3318      	adds	r3, #24
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	440b      	add	r3, r1
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e00f      	b.n	8002292 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800227c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002286:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3318      	adds	r3, #24
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	440b      	add	r3, r1
 8002290:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3318      	adds	r3, #24
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	440b      	add	r3, r1
 80022a2:	3304      	adds	r3, #4
 80022a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	7d1b      	ldrb	r3, [r3, #20]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d111      	bne.n	80022d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	3318      	adds	r3, #24
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3318      	adds	r3, #24
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	440b      	add	r3, r1
 80022ce:	3304      	adds	r3, #4
 80022d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3307      	adds	r3, #7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	061a      	lsls	r2, r3, #24
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3306      	adds	r3, #6
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3305      	adds	r3, #5
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	4313      	orrs	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	3204      	adds	r2, #4
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	4610      	mov	r0, r2
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6811      	ldr	r1, [r2, #0]
 80022fa:	ea43 0200 	orr.w	r2, r3, r0
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	440b      	add	r3, r1
 8002304:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002308:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3303      	adds	r3, #3
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	061a      	lsls	r2, r3, #24
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3302      	adds	r3, #2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3301      	adds	r3, #1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	4313      	orrs	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	4610      	mov	r0, r2
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	6811      	ldr	r1, [r2, #0]
 8002330:	ea43 0200 	orr.w	r2, r3, r0
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	440b      	add	r3, r1
 800233a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800233e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3318      	adds	r3, #24
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	6811      	ldr	r1, [r2, #0]
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3318      	adds	r3, #24
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	440b      	add	r3, r1
 800235e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e00e      	b.n	8002382 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e006      	b.n	8002382 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
  }
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d002      	beq.n	80023ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d11d      	bne.n	80023ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3301      	adds	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d003      	beq.n	800241c <HAL_CAN_GetRxMessage+0x24>
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b02      	cmp	r3, #2
 8002418:	f040 80f3 	bne.w	8002602 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10e      	bne.n	8002440 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d116      	bne.n	800245e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0e7      	b.n	8002610 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0d8      	b.n	8002610 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	331b      	adds	r3, #27
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0204 	and.w	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10c      	bne.n	8002496 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	331b      	adds	r3, #27
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0d5b      	lsrs	r3, r3, #21
 800248c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e00b      	b.n	80024ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	331b      	adds	r3, #27
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	08db      	lsrs	r3, r3, #3
 80024a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	331b      	adds	r3, #27
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0202 	and.w	r2, r3, #2
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	331b      	adds	r3, #27
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	331b      	adds	r3, #27
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	331b      	adds	r3, #27
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	4413      	add	r3, r2
 800252c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0a1a      	lsrs	r2, r3, #8
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	4413      	add	r3, r2
 8002546:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0c1a      	lsrs	r2, r3, #16
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3302      	adds	r3, #2
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	4413      	add	r3, r2
 8002560:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0e1a      	lsrs	r2, r3, #24
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3303      	adds	r3, #3
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	3304      	adds	r3, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	4413      	add	r3, r2
 8002592:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0a1a      	lsrs	r2, r3, #8
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	3305      	adds	r3, #5
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	0c1a      	lsrs	r2, r3, #16
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	3306      	adds	r3, #6
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e1a      	lsrs	r2, r3, #24
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	3307      	adds	r3, #7
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d108      	bne.n	80025ee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	e007      	b.n	80025fe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0220 	orr.w	r2, r2, #32
 80025fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e006      	b.n	8002610 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <HAL_CAN_ActivateNotification+0x1e>
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d109      	bne.n	800264e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6959      	ldr	r1, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e006      	b.n	800265c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
  }
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d07c      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d023      	beq.n	8002700 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f983 	bl	80029d6 <HAL_CAN_TxMailbox0CompleteCallback>
 80026d0:	e016      	b.n	8002700 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	e00c      	b.n	8002700 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	e002      	b.n	8002700 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f989 	bl	8002a12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d024      	beq.n	8002754 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f963 	bl	80029ea <HAL_CAN_TxMailbox1CompleteCallback>
 8002724:	e016      	b.n	8002754 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
 8002738:	e00c      	b.n	8002754 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
 800274c:	e002      	b.n	8002754 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f969 	bl	8002a26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d024      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002766:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f943 	bl	80029fe <HAL_CAN_TxMailbox2CompleteCallback>
 8002778:	e016      	b.n	80027a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	e00c      	b.n	80027a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
 80027a0:	e002      	b.n	80027a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f949 	bl	8002a3a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2210      	movs	r2, #16
 80027ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2208      	movs	r2, #8
 80027e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f930 	bl	8002a4e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fece 	bl	80015a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002826:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2210      	movs	r2, #16
 800282e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2208      	movs	r2, #8
 800284a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f912 	bl	8002a76 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8f9 	bl	8002a62 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2210      	movs	r2, #16
 800288a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f8fc 	bl	8002a8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2208      	movs	r2, #8
 80028ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8f5 	bl	8002a9e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d07b      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d072      	beq.n	80029ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002922:	2b00      	cmp	r3, #0
 8002924:	d043      	beq.n	80029ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800292c:	2b00      	cmp	r3, #0
 800292e:	d03e      	beq.n	80029ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002936:	2b60      	cmp	r3, #96	; 0x60
 8002938:	d02b      	beq.n	8002992 <HAL_CAN_IRQHandler+0x32a>
 800293a:	2b60      	cmp	r3, #96	; 0x60
 800293c:	d82e      	bhi.n	800299c <HAL_CAN_IRQHandler+0x334>
 800293e:	2b50      	cmp	r3, #80	; 0x50
 8002940:	d022      	beq.n	8002988 <HAL_CAN_IRQHandler+0x320>
 8002942:	2b50      	cmp	r3, #80	; 0x50
 8002944:	d82a      	bhi.n	800299c <HAL_CAN_IRQHandler+0x334>
 8002946:	2b40      	cmp	r3, #64	; 0x40
 8002948:	d019      	beq.n	800297e <HAL_CAN_IRQHandler+0x316>
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d826      	bhi.n	800299c <HAL_CAN_IRQHandler+0x334>
 800294e:	2b30      	cmp	r3, #48	; 0x30
 8002950:	d010      	beq.n	8002974 <HAL_CAN_IRQHandler+0x30c>
 8002952:	2b30      	cmp	r3, #48	; 0x30
 8002954:	d822      	bhi.n	800299c <HAL_CAN_IRQHandler+0x334>
 8002956:	2b10      	cmp	r3, #16
 8002958:	d002      	beq.n	8002960 <HAL_CAN_IRQHandler+0x2f8>
 800295a:	2b20      	cmp	r3, #32
 800295c:	d005      	beq.n	800296a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800295e:	e01d      	b.n	800299c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002968:	e019      	b.n	800299e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002972:	e014      	b.n	800299e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	f043 0320 	orr.w	r3, r3, #32
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800297c:	e00f      	b.n	800299e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002986:	e00a      	b.n	800299e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002990:	e005      	b.n	800299e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800299a:	e000      	b.n	800299e <HAL_CAN_IRQHandler+0x336>
            break;
 800299c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2204      	movs	r2, #4
 80029b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f872 	bl	8002ab2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afa:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <__NVIC_SetPriorityGrouping+0x44>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60d3      	str	r3, [r2, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <__NVIC_GetPriorityGrouping+0x18>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	f003 0307 	and.w	r3, r3, #7
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db0b      	blt.n	8002b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f003 021f 	and.w	r2, r3, #31
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <__NVIC_EnableIRQ+0x38>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db12      	blt.n	8002ba0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	490a      	ldr	r1, [pc, #40]	; (8002bac <__NVIC_DisableIRQ+0x44>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	3320      	adds	r3, #32
 8002b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b94:	f3bf 8f4f 	dsb	sy
}
 8002b98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b9a:	f3bf 8f6f 	isb	sy
}
 8002b9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	; 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff05 	bl	8002ac8 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff1a 	bl	8002b10 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff0d 	bl	8002b2c <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff1d 	bl	8002b68 <__NVIC_DisableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff94 	bl	8002c6c <SysTick_Config>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e165      	b.n	8003038 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f040 8154 	bne.w	8003032 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d005      	beq.n	8002da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d130      	bne.n	8002e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 0201 	and.w	r2, r3, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d017      	beq.n	8002e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d123      	bne.n	8002e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80ae 	beq.w	8003032 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_GPIO_Init+0x300>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a5c      	ldr	r2, [pc, #368]	; (8003050 <HAL_GPIO_Init+0x300>)
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b5a      	ldr	r3, [pc, #360]	; (8003050 <HAL_GPIO_Init+0x300>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef2:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x308>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x21a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_GPIO_Init+0x30c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x216>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4d      	ldr	r2, [pc, #308]	; (8003060 <HAL_GPIO_Init+0x310>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x212>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	; (8003064 <HAL_GPIO_Init+0x314>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x20e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <HAL_GPIO_Init+0x318>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x20a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_GPIO_Init+0x31c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x206>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_GPIO_Init+0x320>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x202>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x21c>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x21c>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x21c>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x21c>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x21c>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x21c>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x21c>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	4935      	ldr	r1, [pc, #212]	; (8003054 <HAL_GPIO_Init+0x304>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_GPIO_Init+0x324>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fae:	4a31      	ldr	r2, [pc, #196]	; (8003074 <HAL_GPIO_Init+0x324>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_GPIO_Init+0x324>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd8:	4a26      	ldr	r2, [pc, #152]	; (8003074 <HAL_GPIO_Init+0x324>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_GPIO_Init+0x324>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_GPIO_Init+0x324>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_GPIO_Init+0x324>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800302c:	4a11      	ldr	r2, [pc, #68]	; (8003074 <HAL_GPIO_Init+0x324>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f67f ae96 	bls.w	8002d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40013800 	.word	0x40013800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40021400 	.word	0x40021400
 8003070:	40021800 	.word	0x40021800
 8003074:	40013c00 	.word	0x40013c00

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003088:	787b      	ldrb	r3, [r7, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003094:	e003      	b.n	800309e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	041a      	lsls	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	619a      	str	r2, [r3, #24]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	041a      	lsls	r2, r3, #16
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	400b      	ands	r3, r1
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	619a      	str	r2, [r3, #24]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030f6:	4a05      	ldr	r2, [pc, #20]	; (800310c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fa3a 	bl	8001578 <HAL_GPIO_EXTI_Callback>
  }
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40013c00 	.word	0x40013c00

08003110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0cc      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003124:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d90c      	bls.n	800314c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b8      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003164:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a58      	ldr	r2, [pc, #352]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800316e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	494d      	ldr	r1, [pc, #308]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d044      	beq.n	8003230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d119      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e067      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ee:	4b37      	ldr	r3, [pc, #220]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f023 0203 	bic.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4934      	ldr	r1, [pc, #208]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003200:	f7fe fd8e 	bl	8001d20 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	e00a      	b.n	800321e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7fe fd8a 	bl	8001d20 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e04f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 020c 	and.w	r2, r3, #12
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	429a      	cmp	r2, r3
 800322e:	d1eb      	bne.n	8003208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003230:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d20c      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e032      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4916      	ldr	r1, [pc, #88]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003296:	f000 f821 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fcee 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023c00 	.word	0x40023c00
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08004cc8 	.word	0x08004cc8
 80032d4:	20000010 	.word	0x20000010
 80032d8:	20000014 	.word	0x20000014

080032dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e0:	b094      	sub	sp, #80	; 0x50
 80032e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	647b      	str	r3, [r7, #68]	; 0x44
 80032e8:	2300      	movs	r3, #0
 80032ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ec:	2300      	movs	r3, #0
 80032ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f4:	4b79      	ldr	r3, [pc, #484]	; (80034dc <HAL_RCC_GetSysClockFreq+0x200>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d00d      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x40>
 8003300:	2b08      	cmp	r3, #8
 8003302:	f200 80e1 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x34>
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x3a>
 800330e:	e0db      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003312:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003314:	e0db      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003316:	4b73      	ldr	r3, [pc, #460]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800331a:	e0d8      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <HAL_RCC_GetSysClockFreq+0x200>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d063      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	2200      	movs	r2, #0
 800333a:	63bb      	str	r3, [r7, #56]	; 0x38
 800333c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003344:	633b      	str	r3, [r7, #48]	; 0x30
 8003346:	2300      	movs	r3, #0
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
 800334a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800334e:	4622      	mov	r2, r4
 8003350:	462b      	mov	r3, r5
 8003352:	f04f 0000 	mov.w	r0, #0
 8003356:	f04f 0100 	mov.w	r1, #0
 800335a:	0159      	lsls	r1, r3, #5
 800335c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003360:	0150      	lsls	r0, r2, #5
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4621      	mov	r1, r4
 8003368:	1a51      	subs	r1, r2, r1
 800336a:	6139      	str	r1, [r7, #16]
 800336c:	4629      	mov	r1, r5
 800336e:	eb63 0301 	sbc.w	r3, r3, r1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003380:	4659      	mov	r1, fp
 8003382:	018b      	lsls	r3, r1, #6
 8003384:	4651      	mov	r1, sl
 8003386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800338a:	4651      	mov	r1, sl
 800338c:	018a      	lsls	r2, r1, #6
 800338e:	4651      	mov	r1, sl
 8003390:	ebb2 0801 	subs.w	r8, r2, r1
 8003394:	4659      	mov	r1, fp
 8003396:	eb63 0901 	sbc.w	r9, r3, r1
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ae:	4690      	mov	r8, r2
 80033b0:	4699      	mov	r9, r3
 80033b2:	4623      	mov	r3, r4
 80033b4:	eb18 0303 	adds.w	r3, r8, r3
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	462b      	mov	r3, r5
 80033bc:	eb49 0303 	adc.w	r3, r9, r3
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ce:	4629      	mov	r1, r5
 80033d0:	024b      	lsls	r3, r1, #9
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033d8:	4621      	mov	r1, r4
 80033da:	024a      	lsls	r2, r1, #9
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e2:	2200      	movs	r2, #0
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033ec:	f7fd fb32 	bl	8000a54 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f8:	e058      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fa:	4b38      	ldr	r3, [pc, #224]	; (80034dc <HAL_RCC_GetSysClockFreq+0x200>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	099b      	lsrs	r3, r3, #6
 8003400:	2200      	movs	r2, #0
 8003402:	4618      	mov	r0, r3
 8003404:	4611      	mov	r1, r2
 8003406:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	f04f 0000 	mov.w	r0, #0
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	0159      	lsls	r1, r3, #5
 8003422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003426:	0150      	lsls	r0, r2, #5
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4641      	mov	r1, r8
 800342e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003432:	4649      	mov	r1, r9
 8003434:	eb63 0b01 	sbc.w	fp, r3, r1
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003444:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003448:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800344c:	ebb2 040a 	subs.w	r4, r2, sl
 8003450:	eb63 050b 	sbc.w	r5, r3, fp
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	00eb      	lsls	r3, r5, #3
 800345e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003462:	00e2      	lsls	r2, r4, #3
 8003464:	4614      	mov	r4, r2
 8003466:	461d      	mov	r5, r3
 8003468:	4643      	mov	r3, r8
 800346a:	18e3      	adds	r3, r4, r3
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	464b      	mov	r3, r9
 8003470:	eb45 0303 	adc.w	r3, r5, r3
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003482:	4629      	mov	r1, r5
 8003484:	028b      	lsls	r3, r1, #10
 8003486:	4621      	mov	r1, r4
 8003488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800348c:	4621      	mov	r1, r4
 800348e:	028a      	lsls	r2, r1, #10
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003496:	2200      	movs	r2, #0
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	61fa      	str	r2, [r7, #28]
 800349c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a0:	f7fd fad8 	bl	8000a54 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_GetSysClockFreq+0x200>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3750      	adds	r7, #80	; 0x50
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	007a1200 	.word	0x007a1200

080034e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e273      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d075      	beq.n	80035f2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003506:	4b88      	ldr	r3, [pc, #544]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b04      	cmp	r3, #4
 8003510:	d00c      	beq.n	800352c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b85      	ldr	r3, [pc, #532]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800351a:	2b08      	cmp	r3, #8
 800351c:	d112      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b82      	ldr	r3, [pc, #520]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800352a:	d10b      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b7e      	ldr	r3, [pc, #504]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05b      	beq.n	80035f0 <HAL_RCC_OscConfig+0x108>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d157      	bne.n	80035f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e24e      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x74>
 800354e:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a75      	ldr	r2, [pc, #468]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b70      	ldr	r3, [pc, #448]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6f      	ldr	r2, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6c      	ldr	r2, [pc, #432]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 8003580:	4b69      	ldr	r3, [pc, #420]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a68      	ldr	r2, [pc, #416]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b66      	ldr	r3, [pc, #408]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a65      	ldr	r2, [pc, #404]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fbbe 	bl	8001d20 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fbba 	bl	8001d20 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e213      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xc0>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fbaa 	bl	8001d20 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fba6 	bl	8001d20 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1ff      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	4b51      	ldr	r3, [pc, #324]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0xe8>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d063      	beq.n	80036c6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035fe:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00b      	beq.n	8003622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d11c      	bne.n	8003650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b44      	ldr	r3, [pc, #272]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d116      	bne.n	8003650 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <HAL_RCC_OscConfig+0x152>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d001      	beq.n	800363a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1d3      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363a:	4b3b      	ldr	r3, [pc, #236]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4937      	ldr	r1, [pc, #220]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364e:	e03a      	b.n	80036c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003658:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCC_OscConfig+0x244>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fe fb5f 	bl	8001d20 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003666:	f7fe fb5b 	bl	8001d20 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e1b4      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b28      	ldr	r3, [pc, #160]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4925      	ldr	r1, [pc, #148]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]
 8003698:	e015      	b.n	80036c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369a:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCC_OscConfig+0x244>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fb3e 	bl	8001d20 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe fb3a 	bl	8001d20 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e193      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d036      	beq.n	8003740 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_RCC_OscConfig+0x248>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fe fb1e 	bl	8001d20 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe fb1a 	bl	8001d20 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e173      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_OscConfig+0x240>)
 80036fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x200>
 8003706:	e01b      	b.n	8003740 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_OscConfig+0x248>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fe fb07 	bl	8001d20 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003714:	e00e      	b.n	8003734 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe fb03 	bl	8001d20 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d907      	bls.n	8003734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e15c      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
 8003728:	40023800 	.word	0x40023800
 800372c:	42470000 	.word	0x42470000
 8003730:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003734:	4b8a      	ldr	r3, [pc, #552]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ea      	bne.n	8003716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8097 	beq.w	800387c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003752:	4b83      	ldr	r3, [pc, #524]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	4b7f      	ldr	r3, [pc, #508]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a7e      	ldr	r2, [pc, #504]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b7c      	ldr	r3, [pc, #496]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	4b79      	ldr	r3, [pc, #484]	; (8003964 <HAL_RCC_OscConfig+0x47c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d118      	bne.n	80037bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378a:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCC_OscConfig+0x47c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a75      	ldr	r2, [pc, #468]	; (8003964 <HAL_RCC_OscConfig+0x47c>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003796:	f7fe fac3 	bl	8001d20 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379e:	f7fe fabf 	bl	8001d20 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e118      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	4b6c      	ldr	r3, [pc, #432]	; (8003964 <HAL_RCC_OscConfig+0x47c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x2ea>
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a65      	ldr	r2, [pc, #404]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	e01c      	b.n	800380c <HAL_RCC_OscConfig+0x324>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x30c>
 80037da:	4b61      	ldr	r3, [pc, #388]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a60      	ldr	r2, [pc, #384]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
 80037e6:	4b5e      	ldr	r3, [pc, #376]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a5d      	ldr	r2, [pc, #372]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	e00b      	b.n	800380c <HAL_RCC_OscConfig+0x324>
 80037f4:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	4b57      	ldr	r3, [pc, #348]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a56      	ldr	r2, [pc, #344]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003806:	f023 0304 	bic.w	r3, r3, #4
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d015      	beq.n	8003840 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7fe fa84 	bl	8001d20 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	e00a      	b.n	8003832 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fe fa80 	bl	8001d20 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0d7      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003832:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0ee      	beq.n	800381c <HAL_RCC_OscConfig+0x334>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fe fa6e 	bl	8001d20 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003846:	e00a      	b.n	800385e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fe fa6a 	bl	8001d20 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0c1      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385e:	4b40      	ldr	r3, [pc, #256]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ee      	bne.n	8003848 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003870:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	4a3a      	ldr	r2, [pc, #232]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80ad 	beq.w	80039e0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003886:	4b36      	ldr	r3, [pc, #216]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b08      	cmp	r3, #8
 8003890:	d060      	beq.n	8003954 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d145      	bne.n	8003926 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	4b33      	ldr	r3, [pc, #204]	; (8003968 <HAL_RCC_OscConfig+0x480>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fa3e 	bl	8001d20 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe fa3a 	bl	8001d20 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e093      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	4b29      	ldr	r3, [pc, #164]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	019b      	lsls	r3, r3, #6
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	071b      	lsls	r3, r3, #28
 80038f2:	491b      	ldr	r1, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x480>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fa0f 	bl	8001d20 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe fa0b 	bl	8001d20 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e064      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x41e>
 8003924:	e05c      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCC_OscConfig+0x480>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe f9f8 	bl	8001d20 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe f9f4 	bl	8001d20 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04d      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_OscConfig+0x478>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x44c>
 8003952:	e045      	b.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e040      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_RCC_OscConfig+0x504>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d030      	beq.n	80039dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d129      	bne.n	80039dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d122      	bne.n	80039dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d119      	bne.n	80039dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d10f      	bne.n	80039dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d107      	bne.n	80039dc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800

080039f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e07b      	b.n	8003afa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a12:	d009      	beq.n	8003a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
 8003a1a:	e005      	b.n	8003a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd ffc4 	bl	80019d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aac:	ea42 0103 	orr.w	r1, r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0104 	and.w	r1, r3, #4
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f003 0210 	and.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af02      	add	r7, sp, #8
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1e:	d112      	bne.n	8003b46 <HAL_SPI_Receive+0x44>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10e      	bne.n	8003b46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f8f1 	bl	8003d24 <HAL_SPI_TransmitReceive>
 8003b42:	4603      	mov	r3, r0
 8003b44:	e0ea      	b.n	8003d1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_SPI_Receive+0x52>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e0e3      	b.n	8003d1c <HAL_SPI_Receive+0x21a>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b5c:	f7fe f8e0 	bl	8001d20 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d002      	beq.n	8003b74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b72:	e0ca      	b.n	8003d0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_Receive+0x7e>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b84:	e0c1      	b.n	8003d0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	88fa      	ldrh	r2, [r7, #6]
 8003ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bcc:	d10f      	bne.n	8003bee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d007      	beq.n	8003c0c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d162      	bne.n	8003cda <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c14:	e02e      	b.n	8003c74 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d115      	bne.n	8003c50 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f103 020c 	add.w	r2, r3, #12
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c4e:	e011      	b.n	8003c74 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c50:	f7fe f866 	bl	8001d20 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d803      	bhi.n	8003c68 <HAL_SPI_Receive+0x166>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d102      	bne.n	8003c6e <HAL_SPI_Receive+0x16c>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c72:	e04a      	b.n	8003d0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1cb      	bne.n	8003c16 <HAL_SPI_Receive+0x114>
 8003c7e:	e031      	b.n	8003ce4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d113      	bne.n	8003cb6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	b292      	uxth	r2, r2
 8003c9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	1c9a      	adds	r2, r3, #2
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cb4:	e011      	b.n	8003cda <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb6:	f7fe f833 	bl	8001d20 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d803      	bhi.n	8003cce <HAL_SPI_Receive+0x1cc>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d102      	bne.n	8003cd4 <HAL_SPI_Receive+0x1d2>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cd8:	e017      	b.n	8003d0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1cd      	bne.n	8003c80 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fa45 	bl	8004178 <SPI_EndRxTransaction>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
 8003d06:	e000      	b.n	8003d0a <HAL_SPI_Receive+0x208>
  }

error :
 8003d08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d32:	2301      	movs	r3, #1
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_SPI_TransmitReceive+0x26>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e18a      	b.n	8004060 <HAL_SPI_TransmitReceive+0x33c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d52:	f7fd ffe5 	bl	8001d20 <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d68:	887b      	ldrh	r3, [r7, #2]
 8003d6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d00f      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x70>
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7a:	d107      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x68>
 8003d84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d003      	beq.n	8003d94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d92:	e15b      	b.n	800404c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x82>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x82>
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dac:	e14e      	b.n	800404c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d003      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2205      	movs	r2, #5
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	887a      	ldrh	r2, [r7, #2]
 8003dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	887a      	ldrh	r2, [r7, #2]
 8003dd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	887a      	ldrh	r2, [r7, #2]
 8003dea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d007      	beq.n	8003e16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1e:	d178      	bne.n	8003f12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x10a>
 8003e28:	8b7b      	ldrh	r3, [r7, #26]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d166      	bne.n	8003efc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	881a      	ldrh	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e52:	e053      	b.n	8003efc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d11b      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x176>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d016      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x176>
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d113      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	881a      	ldrh	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	1c9a      	adds	r2, r3, #2
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d119      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x1b8>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d014      	beq.n	8003edc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	1c9a      	adds	r2, r3, #2
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003edc:	f7fd ff20 	bl	8001d20 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d807      	bhi.n	8003efc <HAL_SPI_TransmitReceive+0x1d8>
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d003      	beq.n	8003efc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003efa:	e0a7      	b.n	800404c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1a6      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x130>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1a1      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x130>
 8003f10:	e07c      	b.n	800400c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x1fc>
 8003f1a:	8b7b      	ldrh	r3, [r7, #26]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d16b      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f46:	e057      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d11c      	bne.n	8003f90 <HAL_SPI_TransmitReceive+0x26c>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x26c>
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d114      	bne.n	8003f90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d119      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x2ae>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d014      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fd2:	f7fd fea5 	bl	8001d20 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d803      	bhi.n	8003fea <HAL_SPI_TransmitReceive+0x2c6>
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d102      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x2cc>
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ff6:	e029      	b.n	800404c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1a2      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x224>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d19d      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f917 	bl	8004244 <SPI_EndRxTxTransaction>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004028:	e010      	b.n	800404c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	e000      	b.n	800404c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800404a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800405c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004060:	4618      	mov	r0, r3
 8004062:	3730      	adds	r7, #48	; 0x30
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004078:	f7fd fe52 	bl	8001d20 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	4413      	add	r3, r2
 8004086:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004088:	f7fd fe4a 	bl	8001d20 <HAL_GetTick>
 800408c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	015b      	lsls	r3, r3, #5
 8004094:	0d1b      	lsrs	r3, r3, #20
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	fb02 f303 	mul.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800409e:	e054      	b.n	800414a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d050      	beq.n	800414a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040a8:	f7fd fe3a 	bl	8001d20 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d902      	bls.n	80040be <SPI_WaitFlagStateUntilTimeout+0x56>
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d13d      	bne.n	800413a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d6:	d111      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e0:	d004      	beq.n	80040ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ea:	d107      	bne.n	80040fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004104:	d10f      	bne.n	8004126 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e017      	b.n	800416a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3b01      	subs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	429a      	cmp	r2, r3
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	429a      	cmp	r2, r3
 8004166:	d19b      	bne.n	80040a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000010 	.word	0x20000010

08004178 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418c:	d111      	bne.n	80041b2 <SPI_EndRxTransaction+0x3a>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d004      	beq.n	80041a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d107      	bne.n	80041b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ba:	d12a      	bne.n	8004212 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d012      	beq.n	80041ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2180      	movs	r1, #128	; 0x80
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff ff49 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d02d      	beq.n	8004238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e026      	b.n	800423a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2101      	movs	r1, #1
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff ff36 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01a      	beq.n	8004238 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e013      	b.n	800423a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2200      	movs	r2, #0
 800421a:	2101      	movs	r1, #1
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff23 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e000      	b.n	800423a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004250:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <SPI_EndRxTxTransaction+0x7c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <SPI_EndRxTxTransaction+0x80>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0d5b      	lsrs	r3, r3, #21
 800425c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004260:	fb02 f303 	mul.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d112      	bne.n	8004296 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fef4 	bl	8004068 <SPI_WaitFlagStateUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e00f      	b.n	80042b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	3b01      	subs	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d0f2      	beq.n	8004296 <SPI_EndRxTxTransaction+0x52>
 80042b0:	e000      	b.n	80042b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80042b2:	bf00      	nop
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000010 	.word	0x20000010
 80042c4:	165e9f81 	.word	0x165e9f81

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e041      	b.n	800435e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fbb6 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fa96 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e04e      	b.n	800441e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a23      	ldr	r2, [pc, #140]	; (800442c <HAL_TIM_Base_Start_IT+0xc4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d022      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d01d      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <HAL_TIM_Base_Start_IT+0xc8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_TIM_Base_Start_IT+0xcc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <HAL_TIM_Base_Start_IT+0xd0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_TIM_Base_Start_IT+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_TIM_Base_Start_IT+0xd8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x80>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d010      	beq.n	800441c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	e007      	b.n	800441c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40010400 	.word	0x40010400
 8004440:	40014000 	.word	0x40014000
 8004444:	40001800 	.word	0x40001800

08004448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0202 	mvn.w	r2, #2
 8004474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9b5 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f9a7 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f9b8 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0204 	mvn.w	r2, #4
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f98b 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f97d 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f98e 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b08      	cmp	r3, #8
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b08      	cmp	r3, #8
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0208 	mvn.w	r2, #8
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2204      	movs	r2, #4
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f961 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f953 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f964 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0210 	mvn.w	r2, #16
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2208      	movs	r2, #8
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f937 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f929 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f93a 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0201 	mvn.w	r2, #1
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd f81c 	bl	8001604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fae0 	bl	8004bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8ff 	bl	8004822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b20      	cmp	r3, #32
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0220 	mvn.w	r2, #32
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 faaa 	bl	8004ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIM_ConfigClockSource+0x1c>
 8004670:	2302      	movs	r3, #2
 8004672:	e0b4      	b.n	80047de <HAL_TIM_ConfigClockSource+0x186>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ac:	d03e      	beq.n	800472c <HAL_TIM_ConfigClockSource+0xd4>
 80046ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b2:	f200 8087 	bhi.w	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ba:	f000 8086 	beq.w	80047ca <HAL_TIM_ConfigClockSource+0x172>
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c2:	d87f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b70      	cmp	r3, #112	; 0x70
 80046c6:	d01a      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xa6>
 80046c8:	2b70      	cmp	r3, #112	; 0x70
 80046ca:	d87b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b60      	cmp	r3, #96	; 0x60
 80046ce:	d050      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x11a>
 80046d0:	2b60      	cmp	r3, #96	; 0x60
 80046d2:	d877      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b50      	cmp	r3, #80	; 0x50
 80046d6:	d03c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xfa>
 80046d8:	2b50      	cmp	r3, #80	; 0x50
 80046da:	d873      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d058      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x13a>
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d86f      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b30      	cmp	r3, #48	; 0x30
 80046e6:	d064      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	2b30      	cmp	r3, #48	; 0x30
 80046ea:	d86b      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d060      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d867      	bhi.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05c      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d05a      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	e062      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6899      	ldr	r1, [r3, #8]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f000 f9ad 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	609a      	str	r2, [r3, #8]
      break;
 800472a:	e04f      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6899      	ldr	r1, [r3, #8]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f000 f996 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474e:	609a      	str	r2, [r3, #8]
      break;
 8004750:	e03c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	461a      	mov	r2, r3
 8004760:	f000 f90a 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2150      	movs	r1, #80	; 0x50
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f963 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004770:	e02c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 f929 	bl	80049d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2160      	movs	r1, #96	; 0x60
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f953 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004790:	e01c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 f8ea 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f943 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 80047b0:	e00c      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f000 f93a 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 80047c2:	e003      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	e000      	b.n	80047cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a40      	ldr	r2, [pc, #256]	; (800494c <TIM_Base_SetConfig+0x114>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00f      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <TIM_Base_SetConfig+0x120>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3a      	ldr	r2, [pc, #232]	; (800495c <TIM_Base_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2f      	ldr	r2, [pc, #188]	; (800494c <TIM_Base_SetConfig+0x114>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d027      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d023      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01f      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <TIM_Base_SetConfig+0x120>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a29      	ldr	r2, [pc, #164]	; (800495c <TIM_Base_SetConfig+0x124>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d017      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_Base_SetConfig+0x128>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a27      	ldr	r2, [pc, #156]	; (8004964 <TIM_Base_SetConfig+0x12c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a26      	ldr	r2, [pc, #152]	; (8004968 <TIM_Base_SetConfig+0x130>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <TIM_Base_SetConfig+0x134>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <TIM_Base_SetConfig+0x138>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <TIM_Base_SetConfig+0x13c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <TIM_Base_SetConfig+0x114>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0xf8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <TIM_Base_SetConfig+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d103      	bne.n	8004938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	615a      	str	r2, [r3, #20]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40010000 	.word	0x40010000
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40010400 	.word	0x40010400
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800
 800496c:	40001800 	.word	0x40001800
 8004970:	40001c00 	.word	0x40001c00
 8004974:	40002000 	.word	0x40002000

08004978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 030a 	bic.w	r3, r3, #10
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0210 	bic.w	r2, r3, #16
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f043 0307 	orr.w	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e05a      	b.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d022      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d01d      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d018      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00e      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d004      	beq.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10c      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40010000 	.word	0x40010000
 8004b8c:	40000400 	.word	0x40000400
 8004b90:	40000800 	.word	0x40000800
 8004b94:	40000c00 	.word	0x40000c00
 8004b98:	40010400 	.word	0x40010400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40001800 	.word	0x40001800

08004ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <__libc_init_array>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4d0d      	ldr	r5, [pc, #52]	; (8004c04 <__libc_init_array+0x38>)
 8004bd0:	4c0d      	ldr	r4, [pc, #52]	; (8004c08 <__libc_init_array+0x3c>)
 8004bd2:	1b64      	subs	r4, r4, r5
 8004bd4:	10a4      	asrs	r4, r4, #2
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	42a6      	cmp	r6, r4
 8004bda:	d109      	bne.n	8004bf0 <__libc_init_array+0x24>
 8004bdc:	4d0b      	ldr	r5, [pc, #44]	; (8004c0c <__libc_init_array+0x40>)
 8004bde:	4c0c      	ldr	r4, [pc, #48]	; (8004c10 <__libc_init_array+0x44>)
 8004be0:	f000 f866 	bl	8004cb0 <_init>
 8004be4:	1b64      	subs	r4, r4, r5
 8004be6:	10a4      	asrs	r4, r4, #2
 8004be8:	2600      	movs	r6, #0
 8004bea:	42a6      	cmp	r6, r4
 8004bec:	d105      	bne.n	8004bfa <__libc_init_array+0x2e>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf4:	4798      	blx	r3
 8004bf6:	3601      	adds	r6, #1
 8004bf8:	e7ee      	b.n	8004bd8 <__libc_init_array+0xc>
 8004bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfe:	4798      	blx	r3
 8004c00:	3601      	adds	r6, #1
 8004c02:	e7f2      	b.n	8004bea <__libc_init_array+0x1e>
 8004c04:	08004ce0 	.word	0x08004ce0
 8004c08:	08004ce0 	.word	0x08004ce0
 8004c0c:	08004ce0 	.word	0x08004ce0
 8004c10:	08004ce4 	.word	0x08004ce4

08004c14 <memset>:
 8004c14:	4402      	add	r2, r0
 8004c16:	4603      	mov	r3, r0
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <memset+0xa>
 8004c1c:	4770      	bx	lr
 8004c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c22:	e7f9      	b.n	8004c18 <memset+0x4>

08004c24 <round>:
 8004c24:	ec51 0b10 	vmov	r0, r1, d0
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8004c2e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8004c32:	2c13      	cmp	r4, #19
 8004c34:	ee10 2a10 	vmov	r2, s0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	dc19      	bgt.n	8004c70 <round+0x4c>
 8004c3c:	2c00      	cmp	r4, #0
 8004c3e:	da09      	bge.n	8004c54 <round+0x30>
 8004c40:	3401      	adds	r4, #1
 8004c42:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004c46:	d103      	bne.n	8004c50 <round+0x2c>
 8004c48:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c50:	2200      	movs	r2, #0
 8004c52:	e028      	b.n	8004ca6 <round+0x82>
 8004c54:	4d15      	ldr	r5, [pc, #84]	; (8004cac <round+0x88>)
 8004c56:	4125      	asrs	r5, r4
 8004c58:	ea01 0605 	and.w	r6, r1, r5
 8004c5c:	4332      	orrs	r2, r6
 8004c5e:	d00e      	beq.n	8004c7e <round+0x5a>
 8004c60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c64:	fa42 f404 	asr.w	r4, r2, r4
 8004c68:	4423      	add	r3, r4
 8004c6a:	ea23 0305 	bic.w	r3, r3, r5
 8004c6e:	e7ef      	b.n	8004c50 <round+0x2c>
 8004c70:	2c33      	cmp	r4, #51	; 0x33
 8004c72:	dd07      	ble.n	8004c84 <round+0x60>
 8004c74:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004c78:	d101      	bne.n	8004c7e <round+0x5a>
 8004c7a:	f7fb fad3 	bl	8000224 <__adddf3>
 8004c7e:	ec41 0b10 	vmov	d0, r0, r1
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8004c88:	f04f 35ff 	mov.w	r5, #4294967295
 8004c8c:	40f5      	lsrs	r5, r6
 8004c8e:	4228      	tst	r0, r5
 8004c90:	d0f5      	beq.n	8004c7e <round+0x5a>
 8004c92:	2101      	movs	r1, #1
 8004c94:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004c98:	fa01 f404 	lsl.w	r4, r1, r4
 8004c9c:	1912      	adds	r2, r2, r4
 8004c9e:	bf28      	it	cs
 8004ca0:	185b      	addcs	r3, r3, r1
 8004ca2:	ea22 0205 	bic.w	r2, r2, r5
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	e7e8      	b.n	8004c7e <round+0x5a>
 8004cac:	000fffff 	.word	0x000fffff

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
